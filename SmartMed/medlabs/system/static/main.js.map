{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.module.ts","webpack:///./src/app/core/navigation/navigation.component.html","webpack:///./src/app/core/navigation/navigation.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/shared/components/components.module.ts","webpack:///./src/app/shared/services/api-interceptor.service.ts","webpack:///./src/app/shared/services/api.service.ts","webpack:///./src/app/shared/services/messaging/messaging.service.ts","webpack:///./src/app/shared/services/patient/patient.service.ts","webpack:///./src/app/shared/services/visit/visit.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./search/search.module.ngfactory\": [\n\t\t\"./src/app/search/search.module.ngfactory.js\",\n\t\t\"search-search-module-ngfactory~visit-visit-module-ngfactory\",\n\t\t\"search-search-module-ngfactory\"\n\t],\n\t\"./visit/visit.module.ngfactory\": [\n\t\t\"./src/app/visit/visit.module.ngfactory.js\",\n\t\t\"search-search-module-ngfactory~visit-visit-module-ngfactory\",\n\t\t\"visit-visit-module-ngfactory\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar module = __webpack_require__(ids[0]);\n\t\treturn module;\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","<app-navigation></app-navigation>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { MainLayoutComponent } from './main-layout/main-layout.component';\nimport { NavigationComponent } from './core/navigation/navigation.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material.module';\nimport { AppRoutingModule } from './app.routing.module';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { PatientService } from './shared/services/patient/patient.service';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { VisitService } from './shared/services/visit/visit.service';\nimport { ComponentsModule } from './shared/components/components.module';\nimport { APIService } from './shared/services/api.service';\nimport { ApiInterceptorService } from './shared/services/api-interceptor.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainLayoutComponent,\n    NavigationComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    MaterialModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    ComponentsModule,\n  ],\n  exports: [\n    HttpClientModule,\n    ReactiveFormsModule\n  ],\n  providers: [ APIService, PatientService, VisitService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ApiInterceptorService,\n      multi: true\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {NgModule} from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n\nconst appRoutes: Routes = [\n    { path: 'patient', loadChildren: './search/search.module#SearchModule' },\n    { path: 'visit', loadChildren: './visit/visit.module#VisitModule' },\n    { path: '', redirectTo: 'patient', pathMatch: 'full' },\n    { path: '**', redirectTo: 'patient' },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot(appRoutes, {useHash: true})\n    ],\n    exports: [\n        RouterModule\n    ],\n    declarations: []\n})\nexport class AppRoutingModule { }\n","<!--\n<mat-sidenav-container class=\"sidenav-container\">\n    <mat-sidenav #drawer class=\"sidenav\" fixedInViewport=\"true\" [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\" [mode]=\"(isHandset$ | async) ? 'over' : 'side'\" [opened]=\"!(isHandset$ | async)\">\n        <mat-toolbar color=\"primary\">Menu</mat-toolbar>\n        <mat-nav-list>\n            <a mat-list-item href=\"#\">Link 1</a>\n            <a mat-list-item href=\"#\">Link 2</a>\n            <a mat-list-item href=\"#\">Link 3</a>\n        </mat-nav-list>\n    </mat-sidenav>\n    <mat-sidenav-content>\n-->\n\n<mat-toolbar color=\"primary\">\n    <span>\n        <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\" *ngIf=\"false\">\n            <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n        </button>\n        <span>SmartMed</span>\n    </span>\n    <span class=\"spacer\"></span>\n    <a mat-icon-button *ngIf=\"showSearch\" routerLink=\"/patient/\">\n        <mat-icon aria-label=\"Search Patient\">search</mat-icon>\n    </a>\n</mat-toolbar>\n<div class=\"content-wrapper\">\n    <div class=\"content__inner\">\n        <router-outlet></router-outlet>\n    </div>\n</div>\n<!--\n    </mat-sidenav-content>\n</mat-sidenav-container>\n-->","import { Component, OnInit } from '@angular/core';\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, filter, pairwise } from 'rxjs/operators';\nimport { Router, NavigationEnd, ActivatedRouteSnapshot, ActivatedRoute, RoutesRecognized } from '@angular/router';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css']\n})\nexport class NavigationComponent implements OnInit {\n\n  showSearch = false;\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches)\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver, private router: Router, private route: ActivatedRoute) {\n    const snapshot = route.snapshot;\n  }\n\n  ngOnInit() {\n    this.router.events.pipe(\n      filter( e => e instanceof RoutesRecognized),\n      pairwise()\n    ).subscribe( (e: any[]) => {\n        console.log(e[1].urlAfterRedirects);\n        if (['/patient'].indexOf(e[1].urlAfterRedirects) === -1) {\n          this.showSearch = true;\n        } else {\n          this.showSearch = false;\n        }\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    MatButtonModule,\n    MatExpansionModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatGridListModule,\n    MatSelectModule,\n    MatChipsModule,\n    MatCheckboxModule,\n    MatTabsModule,\n    MatOptionModule,\n    MatAutocompleteModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatProgressBarModule,\n    MatCardModule,\n  } from '@angular/material';\n\n@NgModule({\n    imports: [\n        MatToolbarModule,\n        MatSidenavModule,\n        MatListModule,\n        MatIconModule,\n        MatButtonModule,\n        MatExpansionModule,\n        MatMenuModule,\n        MatProgressSpinnerModule,\n        MatTableModule,\n        MatSortModule,\n        MatPaginatorModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatGridListModule,\n        MatSelectModule,\n        MatChipsModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        MatOptionModule,\n        MatAutocompleteModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatProgressBarModule,\n        MatCardModule,\n    ],\n    exports: [\n        MatToolbarModule,\n        MatSidenavModule,\n        MatListModule,\n        MatIconModule,\n        MatButtonModule,\n        MatExpansionModule,\n        MatMenuModule,\n        MatProgressSpinnerModule,\n        MatTableModule,\n        MatSortModule,\n        MatPaginatorModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatGridListModule,\n        MatSelectModule,\n        MatChipsModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        MatOptionModule,\n        MatAutocompleteModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatProgressBarModule,\n        MatCardModule,\n    ]\n})\nexport class MaterialModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PageTitleComponent } from './page-title/page-title.component';\nimport { MaterialModule } from '../../material.module';\nimport { UploadPhotoComponent } from './upload-photo/upload-photo.component';\nimport { WebcamModule } from 'ngx-webcam';\nimport { ImageTileComponent } from './image-tile/image-tile/image-tile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    WebcamModule,\n  ],\n  declarations: [\n    PageTitleComponent,\n    UploadPhotoComponent,\n    ImageTileComponent,\n  ],\n  exports: [\n    PageTitleComponent,\n    UploadPhotoComponent,\n    ImageTileComponent,\n  ]\n})\nexport class ComponentsModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError, switchAll } from 'rxjs/operators';\nimport { MessagingService } from './messaging/messaging.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiInterceptorService implements HttpInterceptor {\n\n  constructor(private msgSrv: MessagingService) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      map( (event: HttpEvent<any>) => {\n        return event;\n      }),\n      catchError( (err: any) => {\n        if (err instanceof HttpErrorResponse) {\n          this.msgSrv.handleError(err);\n        }\n        return throwError(err);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class APIService {\n\n  baseUrl = '';\n\n  constructor(protected http: HttpClient) { }\n\n    /**\n   * List / Search resource\n   * @param sort\n   * @param order\n   * @param size\n   * @param page\n   * @param search\n   */\n  get(sort?: string, order?: string, size?: number, page?: number, search?: string) {\n    let url = this.baseUrl;\n    url += `?sort=${sort}&order=${order}&size=${size}&page=${page + 1}`;\n    if (search) {\n      url += `&search=${search}`;\n    }\n    return this.http.get(url);\n  }\n\n  /**\n   * Add resource\n   */\n  post(data) {\n    return this.http.post(this.baseUrl, data);\n  }\n\n  /**\n   * Update resource\n   */\n  put(id, data) {\n    return this.http.post(this.baseUrl + `${id}/`, data);\n  }\n\n  /**\n   * Fetch details\n   * @param id : resource id\n   */\n  getDetails(id: number) {\n    return this.http.get(this.baseUrl + `${id}/`);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagingService {\n\n  errCodes = [400, 404, 403];\n\n  constructor() { }\n\n  handleError(err) {\n    if (this.errCodes.indexOf(err.status) !== -1) {\n      switch (err.status) {\n        case 404:\n          console.log('Resource not found');\n          alert('Resource not found');\n          break;\n        case 500:\n          console.log('Server Error =', err.error, ';');\n          alert('Internal Server Error. Sorry for the inconvenience. Try again or contact Admin');\n          break;\n        default:\n          console.log('err.status =', err.status, ';');\n          console.log('err.error =', err.error, ';');\n          alert('This is Embarassing. Don\\'t know what went wrong. Try again or contact Admin');\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Patient } from '../../../interfaces/patient';\nimport { map } from 'rxjs/operators';\nimport { of, Observable } from 'rxjs';\nimport { AUTOCOMPLETE_PANEL_HEIGHT } from '@angular/material';\nimport { APIService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService extends APIService {\n\n  baseUrl = '/clinic/patients/';\n\n  constructor(protected http: HttpClient) {\n    super(http);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Visit } from '../../../interfaces/visit';\nimport { APIService } from '../api.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VisitService extends APIService {\n\n  baseUrl = '/clinic/visits/';\n\n  visits: Visit[];\n  constructor(protected http: HttpClient) {\n    super(http);\n  }\n\n  getVisitsByPatient(sort?: string, order?: string, size?: number, page?: number, patientId?: number, search?: string) {\n    let url = 'clinic/patients/' + patientId + '/visits/';\n    url += `?sort=${sort}&order=${order}&size=${size}&page=${page + 1}`;\n    if (search) {\n      url += `&search=${search}`;\n    }\n    return this.http.get(url);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}